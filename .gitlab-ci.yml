################################################################################
# Gitlab CI samples for Drupal 8  project, code quality and deploy.
#
# Project: https://gitlab.com/mog33/gitlab-ci-drupal
# Documentation: https://gitlab.com/mog33/gitlab-ci-drupal
# Author: Jean Valverde contact@dev-drupal.com
# License: GPL-3
#
# For Gitlab CI help on this file see: https://docs.gitlab.com/ee/ci/yaml
#
################################################################################

################################################################################
# Define your stages, this will be "pipelines" in gitlab.
#   https://docs.gitlab.com/ee/ci/pipelines.html
################################################################################

stages:
  - build
  - tests
  # [TESTING] Next part can be removed for testing only.
  # On each push.
  - code quality
  - code lint
  # Only on tag, when released.
  - php code metrics
  # [DEPLOY] Skipped by default, see SKIP_DEPLOY in .gitlab-ci-variables.yml
  # [DEPLOY] Manual if branch testing or master or tag.
  - deploy to testing
  # [DEPLOY] Manual if branch master or tag.
  - deploy to staging
  # [DEPLOY] Manual if branch master or tag.
  - deploy to production

################################################################################
# Gitlab ci templates for common jobs to avoid repeat, see
#   https://docs.gitlab.com/ee/ci/yaml/#extends
################################################################################

# When to run tests, on branch testing and tags.
.test_except_only:
  # Build and tests are only for branch testing or tags.
  # Skipped if variable SKIP_TEST is set in .gitlab-ci-variables.yml or as
  # variable on Gitlab UI.
  # For more options see
  #   https://docs.gitlab.com/ee/ci/yaml/#only-and-except-simplified
  except:
    refs:
      - master
    variables:
      - $SKIP_TESTS == "1"
  only:
    refs:
      - 8.x-1.x
      - 8.x-dev
      - testing
      - tags

# Reports produced and visible in job report.
.default_artifacts: &default_artifacts
  paths:
    - ${REPORT_DIR}/*.html
    - ${REPORT_DIR}/*.svg
    - ${REPORT_DIR}/*.png
    - ${REPORT_DIR}/*.jpg
  # Name will be based on job and branch.
  name: "${CI_JOB_NAME}-${CI_COMMIT_REF_NAME}"
  # How long do we keep reports files?
  expire_in: 2 day
  # Force artifacts even if the job fail.
  when: always

# Global tests variables.
.test_variables: &test_variables
  MYSQL_DATABASE: "drupal"
  MYSQL_ALLOW_EMPTY_PASSWORD: "1"
  # When install Drupal is needed, choose a profile.
  # To install Drupal from a config ../config/sync folder choose "config_installer"
  DRUPAL_INSTALL_PROFILE: "minimal"
  DB_DUMP: "${CI_PROJECT_DIR}/dump"
  SIMPLETEST_BASE_URL: "http://localhost"
  SIMPLETEST_DB: "mysql://root@mariadb/drupal"
  BROWSERTEST_OUTPUT_DIRECTORY: "${WEB_ROOT}/sites/simpletest"
  # No spaces.
  MINK_DRIVER_ARGS_WEBDRIVER: '["chrome",{"browserName":"chrome","chromeOptions":{"w3c":false,"args":["--whitelisted-ips","--disable-gpu","--headless","--no-sandbox"]}},"http://localhost:9515"]'
  CHROMEDRIVER_OPTS: ''
  APACHE_RUN_USER: "www-data"
  APACHE_RUN_GROUP: "www-data"


# Testing template for phpunit, this provide Apache / Php.
.test_template:
  dependencies:
    - Build
  services:
    - mariadb:latest
  extends: .test_except_only
  variables:
    <<: *test_variables
  before_script:
    # Copy RoboFile.
    - cp ${CI_PROJECT_DIR}/.gitlab-ci/RoboFile.php ${CI_PROJECT_DIR}
    # Symlink Drupal codebase or the module/theme to the web root of the ci
    # image.
    - robo prepare:folders
    # Start Apache.
    - apache2-foreground&
    # Copy files and prepare test folder with permissions.
    - cp ${CI_PROJECT_DIR}/.gitlab-ci/phpunit.xml ${DOC_ROOT}/core
    # Allow phpunit.xml override if a dist file exist.
    - if [ -f ${CI_PROJECT_DIR}/.gitlab-ci/phpunit.xml.dist ]; then
        cp ${CI_PROJECT_DIR}/.gitlab-ci/phpunit.xml.dist ${WEB_ROOT}/core/phpunit.xml;
      fi
    - robo ensure:tests-folders
  artifacts:
    <<: *default_artifacts
    paths:
      - ${REPORT_DIR}/*

################################################################################
# Build and tests jobs.
################################################################################

# Build job for all tests.
# For a project, this build part use composer install to get the Drupal code.
# For a theme this can be used with a specific script to build something
# (grunt, webpack, yarn...). You must add your script and adapt the cache and
# artifacts.
Build:
  stage: build
  extends: .test_except_only
  script:
    - cp ${CI_PROJECT_DIR}/.gitlab-ci/RoboFile.php ${CI_PROJECT_DIR} || true
    # Check Drupal codebase and run 'composer install' for a project.
    - robo project:build
    # After Drupal install we install core/package.json.
    - robo yarn:install
    # Ensure we have Phpunit for next tests.
    - robo install:phpunit
    # Add here any custom build step, composer run-script, grunt, webpack, yarn...
  variables:
    <<: *test_variables
  # [CI_TYPE] When using included Drupal for a module or a theme, the
  # cache and artifacts can be removed as we don't install the Drupal with
  # composer.
  #
  # On build we cache the composer and web folders to speed up the tests.
  cache:
    key: drupal-$CI_BUILD_REF_NAME
    paths:
      - vendor
      - web
  artifacts:
    paths:
      # Build files for next steps and deploy/release.
      - vendor
      - web
      - drush
      - scripts
      - composer.json
      - composer.lock
      - .env.example
      - load.environment.php
    expire_in: 1 day

################################################################################
# Drupal tests see
# https://git.drupalcode.org/project/drupal/blob/HEAD/core/tests/README.md
################################################################################

Unit and kernel:
  stage: tests
  extends: .test_template
  except:
    variables:
      - $SKIP_TESTS == "1"
      - $SKIP_TEST_UNITKERNEL == "1"
  script:
    - robo test:suite "${PHPUNIT_TESTS}unit,${PHPUNIT_TESTS}kernel"

Code coverage:
  stage: tests
  extends: .test_template
  except:
    variables:
      - $SKIP_TESTS == "1"
      - $SKIP_TEST_CODECOVERAGE == "1"
  script:
    - robo test:coverage "${PHPUNIT_TESTS}unit,${PHPUNIT_TESTS}kernel"
  after_script:
    - cp -r ${WEB_ROOT}/${REPORT_DIR} ./
    # [CODECOV] integration, see https://codecov.io
    # Need to set up CI ENVIRONMENT VARIABLES 'CODECOV_TOKEN' to work,
    # see https://codecov.io
    - if [ ! -z ${CODECOV_TOKEN} ] && [ -f ${REPORT_DIR}/coverage.xml ]; then
        bash <(curl -s https://codecov.io/bash) -f ${REPORT_DIR}/coverage.xml || true;
      fi
  # https://docs.gitlab.com/ee/ci/yaml/#coverage
  coverage: '/^\s*Lines:\s*\d+.\d+\%/'

Functional:
  stage: tests
  extends: .test_template
  except:
    variables:
      - $SKIP_TESTS == "1"
      - $SKIP_TEST_FUNCTIONAL == "1"
  script:
    # For functional tests the user need to be the Apache user.
    - sudo -E -u ${APACHE_RUN_USER} robo test:suite "${PHPUNIT_TESTS}functional"
  after_script:
    - cp ${WEB_ROOT}/sites/simpletest/browser_output/*.html ${REPORT_DIR}/functional/ || true

Functional Js:
  stage: tests
  extends: .test_template
  except:
    variables:
      - $SKIP_TESTS == "1"
      - $SKIP_TEST_FUNCTIONALJS == "1"
  script:
    # Launch Chromedriver.
    - /scripts/start-chromedriver.sh&
    - sleep 3s
    - curl -s http://localhost:9515/status | jq '.' || true
    - sudo -E -u ${APACHE_RUN_USER} robo test:suite "${PHPUNIT_TESTS}functional-javascript"
  after_script:
    - cp ${WEB_ROOT}/sites/simpletest/browser_output/*.html ${REPORT_DIR}/functional-javascript/ || true
    - cp ${WEB_ROOT}/sites/simpletest/browser_output/*.png ${REPORT_DIR}/functional-javascript/ || true
    - cp ${WEB_ROOT}/sites/simpletest/browser_output/*.jpg ${REPORT_DIR}/functional-javascript/ || true

# https://www.drupal.org/docs/8/testing/javascript-testing-using-nightwatch
Nightwatch Js:
  stage: tests
  extends: .test_template
  except:
    variables:
      - $SKIP_TESTS == "1"
      - $SKIP_TEST_NIGHTWATCH == "1"
  script:
    # Nightwatch .env file for CI is a snippet on the project page.
    - curl -f -N ${CI_NIGHTWATCH_ENV} -o ${WEB_ROOT}/core/.env
    - sleep 2s
    - cp ${CI_PROJECT_DIR}/.gitlab-ci/html-reporter.js ${WEB_ROOT}/core/html-reporter.js || true
    # [TEMPORARY] Patch for Nightwatch 1.2+, see https://drupal.org/node/3059356
    - if [ ${CI_DRUPAL_VERSION} == "8.8" ]; then
        robo patch:nightwatch https://www.drupal.org/files/issues/2019-08-28/3059356-46.patch;
      elif [ ${CI_DRUPAL_VERSION} == "8.7" ]; then
        robo patch:nightwatch https://www.drupal.org/files/issues/2019-08-30/3059356-51.patch;
      fi
    # [TEMPORARY] Patch to allow install profile, see https://drupal.org/node/3017176
    - robo patch:nightwatch https://www.drupal.org/files/issues/2019-09-06/3017176-12.patch
    # Install from core/package.json
    - robo yarn:install
    # This is the main script, 'yarn install' and 'test:nightwatch' from core folder.
    - robo test:nightwatch
  artifacts:
    <<: *default_artifacts
    paths:
      - ${REPORT_DIR}

################################################################################
# Third party tools tests.
#
# [TESTING] Next part can be removed for testing only.
################################################################################

# [CI_TYPE] [TESTING] Next part can be removed if no dependencies for a single
# module / theme.
Security report:
  stage: tests
  extends: .test_except_only
  except:
    variables:
      - $SKIP_TESTS == "1"
      - $SKIP_TEST_SECURITY == "1"
  before_script:
    - cp ${CI_PROJECT_DIR}/.gitlab-ci/RoboFile.php ${CI_PROJECT_DIR} || true
    - cp ${CI_PROJECT_DIR}/.gitlab-ci/.phpqa.yml ${CI_PROJECT_DIR}/.phpqa.yml || true
    - robo prepare:folders
  script:
    - phpqa --tools security-checker:0
        --buildDir ${REPORT_DIR}
        --analyzedDirs ${DOC_ROOT}
        --verbose
  dependencies:
    - Build
  # Allow failure to produce report and warning when we have an error.
  allow_failure: true

# Behat tests from tests/ folder.
Behat tests:
  stage: tests
  extends: .test_template
  except:
    variables:
      - $SKIP_TESTS == "1"
      - $SKIP_TEST_BEHAT == "1"
  script:
    - cp ${CI_PROJECT_DIR}/.gitlab-ci/RoboFile.php ${WEB_ROOT} || true
    - robo prepare:folders
    - robo install:drupal
    # Starting Chrome, we are not using Chromedriver.
    - /scripts/start-chrome.sh&
    - sleep 3s && curl -s http://localhost:9222/json/version | jq '.'
    - robo install:behat
    - robo test:behat "${CI_PROJECT_DIR}/${REPORT_DIR}"
  variables:
    <<: *test_variables
    DRUPAL_INSTALL_PROFILE: "standard"
    CHROME_OPTS: "--disable-gpu --headless --no-sandbox --window-size=1920,1080 --remote-debugging-address=0.0.0.0 --remote-debugging-port=9222"
    BEHAT_PARAMS: >
      {
        "extensions" : {
          "Bex\\Behat\\ScreenshotExtension" : {
            "image_drivers" : {
              "local" : { "screenshot_directory" : "${CI_PROJECT_DIR}/${REPORT_DIR}/behat" }
            }
          },
          "Drupal\\DrupalExtension" : {
            "drupal" : {
              "drupal_root" : "${WEB_ROOT}"
            }
          }
        }
      }

################################################################################
# Accessibility jobs for Drupal 8+
#
# [TESTING] Next part can be removed for testing only.
################################################################################

Pa11y:
  stage: tests
  extends: .test_template
  except:
    variables:
      - $SKIP_TESTS == "1"
      - $SKIP_TEST_PA11Y == "1"
  script:
    - cp ${CI_PROJECT_DIR}/.gitlab-ci/RoboFile.php ${WEB_ROOT} || true
    - robo prepare:folders
    - robo install:drupal
    # Install Pa11y-ci for tests with yarn.
    - robo install:pa11y
    # Run pa11y tests using ./gitlab-ci/pa11y-ci.json file definition.
    - robo test:pa11y
  after_script:
    - cp -f ${WEB_ROOT}/core/reports/pa11y*.png ${CI_PROJECT_DIR}/${REPORT_DIR}/
  variables:
    <<: *test_variables
    DRUPAL_INSTALL_PROFILE: "standard"
  artifacts:
    <<: *default_artifacts
    paths:
      - ${CI_PROJECT_DIR}/*.png

################################################################################
# Code quality jobs for Drupal 8+
#
# [TESTING] Next part can be removed for testing only.
################################################################################

# Common definition for all qa jobs.
.qa_template:
  only:
    refs:
      - branches
  except:
    variables:
      - $SKIP_QA == "1"

# Automated quality check job when something is pushed/merged on master.
# We have a limit on errors we accept on the tools, if failed we run a
# report and stop.
Code quality:
  stage: code quality
  extends: .qa_template
  artifacts:
    <<: *default_artifacts
  before_script:
    - cp ${CI_PROJECT_DIR}/.gitlab-ci/.phpmd.xml ${CI_PROJECT_DIR}/.phpmd.xml || true
    - cp ${CI_PROJECT_DIR}/.gitlab-ci/.phpqa.yml ${CI_PROJECT_DIR}/.phpqa.yml || true
    - cp ${CI_PROJECT_DIR}/.gitlab-ci/RoboFile.php ${CI_PROJECT_DIR} || true
    - robo prepare:folders
  script:
    - phpqa --tools ${TOOLS}
        --buildDir ${REPORT_DIR}
        --analyzedDirs ${PHP_CODE_QA}

# Drupal coding standard best practices report.
Best practices:
  stage: code quality
  extends: .qa_template
  except:
    variables:
      - $SKIP_QA == "1"
      - $SKIP_QA_BESTPRACTICES == "1"
  artifacts:
    <<: *default_artifacts
  before_script:
    - cp ${CI_PROJECT_DIR}/.gitlab-ci/.phpqa.yml ${CI_PROJECT_DIR}/.phpqa.yml || true
    # Move from Drupal to DrupalPractice standard.
    - sed -i 's/Drupal/DrupalPractice/g' ${CI_PROJECT_DIR}/.phpqa.yml
    - cp ${CI_PROJECT_DIR}/.gitlab-ci/RoboFile.php ${CI_PROJECT_DIR} || true
    - robo prepare:folders
  script:
    - phpqa --tools ${BEST_PRACTICES}
        --buildDir ${REPORT_DIR}
        --analyzedDirs ${PHP_CODE_QA}
  # Allow failure to produce report and warning.
  allow_failure: true

################################################################################
# Code  lint jobs for Drupal 8+
#
# [TESTING] Next part can be removed for testing only.
################################################################################

# Common definition for all lint jobs.
.lint_template:
  only:
    refs:
      - branches
  except:
    variables:
      - $SKIP_LINT == "1"
  # Allow failure to produce report and warning, not a critical job.
  allow_failure: true

# This is a eslint report based on Drupal 8.x standards.
Js lint:
  stage: code lint
  extends: .lint_template
  except:
    variables:
      - $SKIP_LINT == "1"
      - $SKIP_LINT_JS == "1"
  artifacts:
    <<: *default_artifacts
    paths:
      - ${REPORT_DIR}/js-lint-report.html
  before_script:
    - cp ${CI_PROJECT_DIR}/.gitlab-ci/.eslintignore ${CI_PROJECT_DIR}/.eslintignore || true
    - cp ${CI_PROJECT_DIR}/.gitlab-ci/RoboFile.php ${CI_PROJECT_DIR} || true
    - robo prepare:folders
    # Install stylelint from core/package.json
    - robo yarn:install
  script:
    # Run the eslint command to generate an html report.
    - ${WEB_ROOT}/core/node_modules/.bin/eslint
        --config ${WEB_ROOT}/core/.eslintrc.passing.json
        --format html
        --output-file ${REPORT_DIR}/js-lint-report.html
        ${JS_CODE}

# Drupal 8.x rules used here for stylelint to check css.
Css lint:
  stage: code lint
  extends: .lint_template
  except:
    variables:
      - $SKIP_LINT == "1"
      - $SKIP_LINT_CSS == "1"
  # artifacts:
    # <<: *default_artifacts
    # paths:
      # - ${REPORT_DIR}/*.txt
  before_script:
    - cp ${CI_PROJECT_DIR}/.gitlab-ci/RoboFile.php ${CI_PROJECT_DIR} || true
    - robo prepare:folders
    # Install stylelint from core/package.json
    - robo yarn:install
  script:
    # Css report, terminal only for now.
    - ${WEB_ROOT}/core/node_modules/.bin/stylelint
        --config ${WEB_ROOT}/core/.stylelintrc.json
        --formatter verbose "${CSS_FILES}"

# This is a sass lint report, default rules used here for Bootstrap based sass.
Sass lint:
  stage: code lint
  extends: .lint_template
  except:
    variables:
      - $SKIP_LINT == "1"
      - $SKIP_LINT_SASS == "1"
  artifacts:
    <<: *default_artifacts
    paths:
      - ${REPORT_DIR}/sass-lint-report.html
  before_script:
    - cp ${CI_PROJECT_DIR}/.gitlab-ci/RoboFile.php ${CI_PROJECT_DIR} || true
    - robo prepare:folders
    # Install sass-lint dev.
    - robo yarn add git://github.com/sasstools/sass-lint.git#develop
  script:
    # Html report.
    - ${WEB_ROOT}/core/node_modules/.bin/sass-lint --config ${SASS_CONFIG}
        --verbose
        --no-exit
        --format html
        --output ${REPORT_DIR}/sass-lint-report.html
    - echo "[Note] If sass-lint succeed without errors, no report or message will appear."
  allow_failure: true

################################################################################
# Code metrics, would probably make sense only for a tag release.
#
# [TESTING] Next part can be removed for testing only.
################################################################################

# Common definition for all metrics jobs.
.metrics_template:
  only:
    refs:
      - 8.x-1.x
      - 8.x-dev
      - master
      - tags
  except:
    variables:
      - $SKIP_METRICS == "1"
  artifacts:
    <<: *default_artifacts
  before_script:
    - cp ${CI_PROJECT_DIR}/.gitlab-ci/.phpqa.yml ${CI_PROJECT_DIR}/.phpqa.yml || true
    - cp ${CI_PROJECT_DIR}/.gitlab-ci/RoboFile.php ${CI_PROJECT_DIR} || true
    - robo prepare:folders

# Phpmetrics report, no pass or failure as it's just informative.
Php metrics:
  stage: php code metrics
  extends: .metrics_template
  except:
    variables:
      - $SKIP_METRICS == "1"
      - $SKIP_METRICS_PHPMETRICS == "1"
  artifacts:
    paths:
      - ${REPORT_DIR}/
  script:
    - phpqa --tools phpmetrics
        --buildDir ${REPORT_DIR}
        --analyzedDirs ${PHP_CODE_METRICS}

# Phploc, Pdepend report, no pass or failure as it's just informative.
Php stats:
  stage: php code metrics
  extends: .metrics_template
  except:
    variables:
      - $SKIP_METRICS == "1"
      - $SKIP_METRICS_PHPSTATS == "1"
  script:
    - phpqa --tools phploc,pdepend
        --buildDir ${REPORT_DIR}
        --analyzedDirs ${PHP_CODE_METRICS}

################################################################################
# [DEPLOY] Deploy jobs definition.
# [CI_TYPE] Next part could be used only for a project with deploy.
# [TESTING] Next part can be removed for testing only.
#
# This is a sample workflow, testing is run on master and testing branches
# pushes or merge, other deploy are manual. Using a basic bash deploy, you must
# adapt if you are using a specific deploy process.
#
# You need to be sure we can ssh to the machine, a deploy key must be manually
# added on the target in  ~/.ssh/authorized_keys
# Private key name and values must be set on Gitlab:
#   Settings > CI / CD > Variables
################################################################################

# Basic docker image with ssh to be able to access a remote.
# Each access must add a ssh key, see samples below.
.deploy_template:
  image: alpine:latest
  only:
    refs:
      - master
      - tags
  except:
    variables:
      - $SKIP_DEPLOY == "1"
  before_script:
    - apk --no-cache add openssh-client
    - mkdir -p ~/.ssh
    - chmod 700 ~/.ssh
    # Avoid warning on connection.
    - echo -e "Host *\n\tStrictHostKeyChecking no\n\n" > ~/.ssh/config
    # Add our private key.
    - echo -e "${PRIVATE_KEY}" > ~/.ssh/id_rsa
    - chmod 400 ~/.ssh/id_rsa
  variables:
    PRIVATE_KEY: ""
  when: manual

Deploy to testing:
  stage: deploy to testing
  extends: .deploy_template
  only:
    refs:
      - testing
  environment:
    name: testing
    url: http://${TESTING_HOST}
  script:
    # We can now ssh and run any deploy script.
    - ssh -T $USER_NAME@$TESTING_HOST
        "${DRUPAL_FOLDER}/scripts/my_deploy_script.sh;"
  variables:
    PRIVATE_KEY: "${TESTING_PRIVATE_KEY}"

Deploy to staging:
  stage: deploy to staging
  extends: .deploy_template
  environment:
    name: staging
    url: http://${STAGING_HOST}
  script:
    # We can now ssh and run any deploy script.
    - ssh -T $USER_NAME@$TESTING_HOST
        "${DRUPAL_FOLDER}/scripts/my_deploy_script.sh;"
  variables:
    PRIVATE_KEY: "${STAGING_PRIVATE_KEY}"

Deploy to production:
  stage: deploy to production
  extends: .deploy_template
  environment:
    name: production
    url: http://${PRODUCTION_HOST}
  script:
    # We can now ssh and run any deploy script.
    - ssh -T $USER_NAME@$TESTING_HOST
        "${DRUPAL_FOLDER}/scripts/my_deploy_script.sh;"
  variables:
    PRIVATE_KEY: "${PRODUCTION_PRIVATE_KEY}"

################################################################################
# Variables are in a separate file to ease customization.
################################################################################

include:
  - local: '/.gitlab-ci/.gitlab-ci-variables.yml'

################################################################################
# Base image for all ci actions, see https://gitlab.com/mog33/drupal8ci
################################################################################

image: mogtofu33/drupal8ci:${CI_DRUPAL_VERSION}-${CI_IMAGE_VARIANT}
